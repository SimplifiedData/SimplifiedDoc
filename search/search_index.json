{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Simplifile Doc","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"crossplane/01get-start/","title":"Getting Started","text":"<p>In Upbound AWS Provider has been deprecated in favor of the AWS provider family. Because it new \"Provider Family\" or groups of more narrowly scoped providers</p>"},{"location":"crossplane/02install/","title":"Install Crossplane","text":""},{"location":"crossplane/02install/#configure-authentication","title":"Configure authentication","text":"<p>Upbound supports authentication AWS via access key, service account or AssumeRole.</p> <p>Authentication method with <code>ProviderConfig</code>, applied to the <code>Provider</code>.</p> <p>In this case, we use <code>Service Accounts</code>.</p>"},{"location":"crossplane/02install/#authenticate-using-iam-roles-for-service-accounts","title":"Authenticate using IAM Roles for Service Accounts","text":"<p>AWS EKS can use IAM Roles for Service Accounts (IRSA) for authenticate the AWS Provider.</p> <p>First, create IAM Role and Policy for use authen in the AWS Provide.</p> <pre><code>module \"eks\" {\n    source = \"terraform-aws-modules/eks/aws\"\n    ...\n}\ndata \"aws_caller_identity\" \"current\" {}\ndata \"aws_iam_policy_document\" \"assume\" {\n  statement {\n    actions = [ \"sts:AssumeRoleWithWebIdentity\" ]\n    effect = \"Allow\"\n    condition {\n      test = \"StringLike\"\n      values = [ \"system:serviceaccount:upbound-system:provider-aws-*\" ]\n      variable = \"${module.eks.oidc_provider}:sub\"\n    }\n    condition {\n      test     = \"StringLike\"\n      variable = \"${module.eks.oidc_provider}:aud\"\n      values = [\"sts.amazonaws.com\"]\n    }\n    principals {\n      identifiers = [module.eks.oidc_provider_arn]\n      type        = \"Federated\"\n    }\n  }\n}\n\nresource \"aws_iam_role\" \"crossplane\" {\n  name_prefix = \"${var.tags[\"Service\"]}-${var.tags[\"System\"]}-${var.environment}-crossplane-\"\n  path        = \"/\"\n  description = \"IAM Role for Crossplane\"\n  assume_role_policy    = data.aws_iam_policy_document.assume[0].json\n  tags = merge(var.tags, {\n    Name = \"${var.tags[\"Service\"]}-${var.tags[\"System\"]}-${var.environment}-crossplane\"\n  })\n}\n\nresource \"aws_iam_policy\" \"CrossplaneControllerPolicy\" {\n  name        = \"AWSGSCrossplanePolicy-${random_string.default.result}\"\n  path        = \"/\"\n  description = \"Policy for clossplane resource provider\"\n\n  ## Recommend Setting policy according to the desired use\n  policy      = templatefile(\"${path.module}/policys/crossplane_policy.json\", {})\n}\n\nresource \"aws_iam_role_policy_attachment\" \"CrossplaneControllerPolicy\" {\n  role       = aws_iam_role.crossplane.name\n  policy_arn = aws_iam_policy.CrossplaneControllerPolicy.arn\n}\n</code></pre>"},{"location":"crossplane/02install/#install-the-provider-aws","title":"Install the provider-aws","text":""},{"location":"crossplane/02install/#install-crossplane-in-eks","title":"Install Crossplane in EKS","text":""},{"location":"crossplane/02install/#upbound-universal-crossplane","title":"Upbound Universal Crossplane","text":"<p>First, install Upbound Up commad-line. Up CLI is simplifies configuration and management of Upbound Universal Crossplane (UXP).</p> <p>Install <code>up</code> with the command:</p> <pre><code>curl -sL \"https://cli.upbound.io\" | sh\n</code></pre> <p>More information the Upbound command-line is in the Upbound Up Document.</p> <p>UXP is the Upbound official of Crossplane for self-hostes control planes.</p> <p>Next to, Install UXP into Kubernetes cluster:</p> <pre><code>up uxp install\n</code></pre> <p>More infomation use Upbound command for uxp in the Upbound UXP documentation.</p>"},{"location":"crossplane/02install/#helm-upbound-universal-crossplane","title":"Helm - Upbound Universal Crossplane","text":""},{"location":"crossplane/02install/#create-controllerconfig","title":"Create ControllerConfig","text":"<p>First, create controller. <code>ControllerConfig</code> create setting used by <code>Provider</code> deployment. For IRSA, the <code>ControllerConfig</code> provides an <code>annotation</code> of the ARN of role use with Kubernetes Service Account.</p> <pre><code>apiVersion: pkg.crossplane.io/v1alpha1\nkind: ControllerConfig\nmetadata:\n  name: aws-config\n  annotations:\n    eks.amazonaws.com/role-arn: arn:aws:iam::000000000000:role/eks-test-role\nspec:\n  podSecurityContext:\n    fsGroup: 2000\n</code></pre> <p>After that, apply the <code>CrotrollerConfig</code> and verify the installation with <code>kubectl get crontrollerconfig</code></p> <pre><code>$ kubectl get controllerconfig\nNAME                    AGE\naws-config              6s\n</code></pre>"},{"location":"crossplane/02install/#create-a-providerconfig","title":"Create a ProviderConfig","text":"<p>Next, create the <code>ProviderConfig</code> for explicitly configures the official AWS Provider-Family to use <code>IRSA</code> authentication.</p> <p>This creates <code>Provider : provider-family-aws</code> version of the image <code>provider-family-aws</code> according to version Controller of the Upbound Universal Crossplane.</p> <p>Ex. helm version or UXP version.</p> <pre><code>helm \n</code></pre>"},{"location":"crossplane/03config/","title":"Configuration","text":""}]}